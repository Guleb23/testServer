import {
  Flex,
  Box,
  Table,
  Tbody,
  Td,
  Text,
  Th,
  Thead,
  Tr,
  useColorModeValue,
  useDisclosure,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  Button,
  Icon,
} from '@chakra-ui/react';
import * as React from 'react';
import { FaPhone, FaAddressCard, FaMoneyBillAlt, FaShoppingCart } from 'react-icons/fa';
import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  getSortedRowModel,
  useReactTable,
} from '@tanstack/react-table';
import Card from 'components/card/Card';
import axios from "../../../../api/axios";

const columnHelper = createColumnHelper();

export default function ColumnTable(props) {
  const { tableData } = props;
  const [sorting, setSorting] = React.useState([]);
  const textColor = useColorModeValue('secondaryGray.900', 'white');
  const borderColor = useColorModeValue('gray.200', 'whiteAlpha.100');

  const [selectedClient, setSelectedClient] = React.useState(null);
  const [selectedOrder, setSelectedOrder] = React.useState(null); // –î–æ–±–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  const { isOpen, onOpen, onClose } = useDisclosure();
  const { isOpen: isOrderOpen, onOpen: onOrderOpen, onClose: onOrderClose } = useDisclosure();

  const handleClientClick = async (clientName) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ clientName —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    if (clientName && typeof clientName === 'string') {
      try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏–º–µ–Ω–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ URL
        const response = await axios.get(`/dashboard/client-details/${encodeURIComponent(clientName)}`);
        console.log(response.data);

        setSelectedClient(response.data); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        onOpen(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞:', error);
      }
    } else {
      console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:', clientName);
    }
  };

  const handleOrderClick = (order) => {
    setSelectedOrder(order); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    onOrderOpen(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
  };

  const columns = [
    columnHelper.accessor('id', {
      id: 'id',
      header: () => (
        <Text fontSize={{ sm: '10px', lg: '12px' }} color="gray.400">–ù–æ–º–µ—Ä</Text>
      ),
      cell: (info) => (
        <Text color={textColor} fontSize="sm" fontWeight="700">{info.getValue()}</Text>
      ),
    }),
    columnHelper.accessor('client', {
      id: 'client',
      header: () => (
        <Text fontSize={{ sm: '10px', lg: '12px' }} color="gray.400">–ö–ª–∏–µ–Ω—Ç</Text>
      ),
      cell: (info) => {
        const clientData = info.getValue(); // —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç
        return (
          <Button
            size="sm"
            variant="link"
            colorScheme="blue"
            onClick={() => handleClientClick(clientData)} // –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–µ–º –∫–ª–∏–µ–Ω—Ç–∞
          >
            {clientData}
          </Button>
        );
      },
    }),
    columnHelper.accessor('cost', {
      id: 'cost',
      header: () => (
        <Text fontSize={{ sm: '10px', lg: '12px' }} color="gray.400">–°—É–º–º–∞</Text>
      ),
      cell: (info) => (
        <Text color={textColor} fontSize="sm" fontWeight="700">{info.getValue()}</Text>
      ),
    }),
    columnHelper.accessor('date', {
      id: 'date',
      header: () => (
        <Text fontSize={{ sm: '10px', lg: '12px' }} color="gray.400">–î–∞—Ç–∞</Text>
      ),
      cell: (info) => (
        <Text color={textColor} fontSize="sm" fontWeight="700">{info.getValue()}</Text>
      ),
    }),
  ];

  const [data, setData] = React.useState([]);

  React.useEffect(() => {
    if (tableData.length > 0) {
      setData(tableData);
    }
  }, [tableData]);

  const table = useReactTable({
    data,
    columns,
    state: {
      sorting,
    },
    onSortingChange: setSorting,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    debugTable: true,
  });

  return (
    <>
      <Card
        flexDirection="column"
        w="100%"
        px="0px"
        overflowX={{ sm: 'scroll', lg: 'hidden' }}
      >
        <Flex px="25px" mb="8px" justifyContent="space-between" align="center">
          <Text
            color={textColor}
            fontSize="22px"
            mb="4px"
            fontWeight="700"
            lineHeight="100%"
          >
            –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
          </Text>
        </Flex>
        <Box>
          <Table variant="simple" color="gray.500" mb="24px" mt="12px">
            <Thead>
              {table.getHeaderGroups().map((headerGroup) => (
                <Tr key={headerGroup.id}>
                  {headerGroup.headers.map((header) => (
                    <Th
                      key={header.id}
                      colSpan={header.colSpan}
                      pe="10px"
                      borderColor={borderColor}
                      cursor="pointer"
                      onClick={header.column.getToggleSortingHandler()}
                    >
                      <Flex
                        justifyContent="space-between"
                        align="center"
                        fontSize={{ sm: '10px', lg: '12px' }}
                        color="gray.400"
                      >
                        {flexRender(header.column.columnDef.header, header.getContext())}
                        {header.column.getIsSorted() ? (header.column.getIsSorted() === 'asc' ? ' üîº' : ' üîΩ') : ''}
                      </Flex>
                    </Th>
                  ))}
                </Tr>
              ))}
            </Thead>
            <Tbody>
              {table.getRowModel().rows.slice(0, 11).map((row) => (
                <Tr key={row.id}>
                  {row.getVisibleCells().map((cell) => (
                    <Td
                      key={cell.id}
                      fontSize={{ sm: '14px' }}
                      minW={{ sm: '150px', md: '200px', lg: 'auto' }}
                      borderColor="transparent"
                    >
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </Td>
                  ))}
                </Tr>
              ))}
            </Tbody>
          </Table>
        </Box>
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ */}
      <Modal isOpen={isOpen} onClose={onClose} size="lg">
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            {selectedClient ? (
              <Box>
                <Flex direction="column" mb="4">
                  <Text fontSize="xl" fontWeight="bold">{selectedClient.fullName}</Text>
                  <Text fontSize="md" color="gray.500">{selectedClient.phone}</Text>
                  <Text fontSize="md" color="gray.500">{selectedClient.address}</Text>
                  <Text fontSize="md" color="gray.500">–ö—ç—à–±—ç–∫: {selectedClient.cashback}‚ÇΩ</Text>
                </Flex>

                <Box mb="4">
                  <Text fontSize="lg" fontWeight="bold" mb="2">–ó–∞–∫–∞–∑—ã</Text>
                  {selectedClient.orders.map((order) => (
                    <Box key={order.orderId} mb="4" p="4" borderWidth="1px" borderRadius="lg" boxShadow="sm">
                      <Flex justify="space-between" mb="2">
                        <Text fontWeight="bold">–ó–∞–∫–∞–∑ #{order.orderId}</Text>
                        <Text fontWeight="medium" color="gray.500">{order.date}</Text>
                      </Flex>
                      <Flex justify="space-between" align="center">
                        <Flex direction="column">
                          <Text>–°—É–º–º–∞: {order.totalPriceWithoutDiscount}‚ÇΩ</Text>
                          <Text>–°–∫–∏–¥–∫–∞: {order.discountAmount}‚ÇΩ ({order.discountPercent}%)</Text>
                          <Text>–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–µ—à–±–µ–∫: {order.cashbackUsed}‚ÇΩ</Text>
                          <Text>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {order.finalTotalPrice}‚ÇΩ</Text>
                          <Text>–ü–æ–ª—É—á–µ–Ω–æ –∫–µ—à–±–µ–∫–∞: {order.cashbackEarned}‚ÇΩ</Text>
                        </Flex>

                        <Button leftIcon={<FaShoppingCart />} variant="outline" size="sm" onClick={() => handleOrderClick(order)}>
                          –°–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã
                        </Button>
                      </Flex>
                    </Box>
                  ))}
                </Box>
              </Box>
            ) : (
              <Text>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</Text>
            )}
          </ModalBody>
        </ModalContent>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ */}
      <Modal isOpen={isOrderOpen} onClose={onOrderClose} size="lg">
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            {selectedOrder ? (
              <Box>
                <Text fontSize="lg" fontWeight="bold">–ó–∞–∫–∞–∑ #{selectedOrder.orderId}</Text>
                {selectedOrder.products.length > 0 ? (
                  <Box>
                    {selectedOrder.products.map((product, index) => (
                      <Box key={index} mb="4" p="4" borderWidth="1px" borderRadius="lg" boxShadow="sm">
                        <Text fontWeight="bold">{product.name}</Text>
                        <Text>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category}</Text>
                        <Text>–¶–µ–Ω–∞: {product.price}‚ÇΩ</Text>
                        <Text>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.quantity}</Text>
                      </Box>
                    ))}
                  </Box>
                ) : (
                  <Text>–í —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.</Text>
                )}
              </Box>
            ) : (
              <Text>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ.</Text>
            )}
          </ModalBody>
        </ModalContent>
      </Modal>
    </>
  );
}
